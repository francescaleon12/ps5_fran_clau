---
title: "Problem Set 5"
author: "Francesca Leon and Claudia Felipe"
date: "11/05/2024"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

**Due 11/9 at 5:00PM Central. Worth 100 points + 10 points extra credit.**

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (name and cnet ID): Francesca leon (francescaleon)
    - Partner 2 (name and cnet ID): Claudia Felipe (claudiafelipe)
3. Partner 1 will accept the `ps5` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: **FL** **CF**
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: **0** Late coins left after submission: **4**
7. Knit your `ps5.qmd` to an PDF file to make `ps5.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps5.qmd` and `ps5.pdf` to your github repo.
9. (Partner 1): submit `ps5.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

\newpage

```{python}
import pandas as pd
import altair as alt
import time
from bs4 import BeautifulSoup
import requests
from tabulate import tabulate

import warnings 
warnings.filterwarnings('ignore')
alt.renderers.enable("png")
```


## Step 1: Develop initial scraper and crawler

### 1. Scraping (PARTNER 1)

```{python}
# Get the HTML
soup = BeautifulSoup(requests.get("https://oig.hhs.gov/fraud/enforcement/").\
  content, "html.parser")

# Find and store titles
titles = soup.find_all("h2", class_="usa-card__heading")
title_list = []
for title in titles:
    title = title.find("a").text.strip()
    title_list.append(title)

# Find and store links
links = soup.find_all("h2", class_="usa-card__heading")
link_list = []
for link in links:
    link = link.find("a").get("href")
    link_list.append("https://oig.hhs.gov" + link)

# Find and store dates
dates = soup.find_all("span", class_="text-base-dark")
date_list = []
for date in dates:
    date = date.text.strip()
    date_list.append(date)

# Find and store categories
categories = soup.find_all("ul", class_="display-inline")
category_list = []
for category in categories:
    category = category.find("li").text.strip()
    category_list.append(category)

# Merge values
values = pd.DataFrame({
    "Title": title_list,
    "Link": link_list,
    "Date": date_list,
    "Category": category_list
})

# Print head
values.head()
```

  
### 2. Crawling (PARTNER 1)

```{python}
# List to store agencies
agencies = []

# Loop through each link
for link in values["Link"]:
        response = requests.get(link)
        soup_agency = BeautifulSoup(response.content, "html.parser")
        agency = soup_agency.find("span", text="Agency:")
        agencies.append(agency.next_sibling.strip())

# Add column to the dataframe
values["Agency"] = agencies

# Print head
values.head()
```

## Step 2: Making the scraper dynamic

### 1. Turning the scraper into a function 

* a. Pseudo-Code (PARTNER 2)


* b. Create Dynamic Scraper (PARTNER 2)

```{python}

```

* c. Test Partner's Code (PARTNER 1)

```{python}

```

## Step 3: Plot data based on scraped data

### 1. Plot the number of enforcement actions over time (PARTNER 2)

```{python}

```

### 2. Plot the number of enforcement actions categorized: (PARTNER 1)

* based on "Criminal and Civil Actions" vs. "State Enforcement Agencies"

```{python}

```

* based on five topics

```{python}

```

## Step 4: Create maps of enforcement activity

### 1. Map by State (PARTNER 1)

```{python}

```


### 2. Map by District (PARTNER 2)

```{python}

```

## Extra Credit

### 1. Merge zip code shapefile with population
```{python}

```

### 2. Conduct spatial join
```{python}

```

### 3. Map the action ratio in each district
```{python}

```